import os
import logging
import random
import string
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from dotenv import load_dotenv

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    filename="bot.log",
    encoding="utf-8"
)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=storage)

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect("tickets.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS tickets (
    code TEXT PRIMARY KEY,
    user_id INTEGER,
    problem TEXT,
    status TEXT
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS problem_feedback (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    description TEXT,
    count INTEGER DEFAULT 1
)
""")
conn.commit()

# --- –ü—Ä–æ—â–∞–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã ---
FAREWELL_PHRASES = [
    "–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞! üòä",
    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ LKN VPN!",
    "–ñ–µ–ª–∞–µ–º –≤–∞–º –æ—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è! üöÄ",
    "–í—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!",
    "–ë—É–¥—å—Ç–µ –Ω–∞ —Å–≤—è–∑–∏! üì°",
    "VPN —Å –ª—é–±–æ–≤—å—é –æ—Ç LKN üíô",
    "–í–∞—à –∫–æ–º—Ñ–æ—Ä—Ç ‚Äî –Ω–∞—à–∞ –∑–∞–¥–∞—á–∞!",
    "–ù–∞–¥–µ–µ–º—Å—è, –≤—Å—ë —Ä–µ—à–∏–ª–æ—Å—å!",
    "–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –µ—â—ë –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è.",
    "–ú—ã —Ä—è–¥–æ–º 24/7 –¥–ª—è –≤–∞—Å!",
    "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!",
    "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!",
]

# --- States ---
class Form(StatesGroup):
    waiting_for_device = State()
    waiting_for_server = State()
    waiting_for_country = State()
    waiting_for_resolve = State()
    waiting_for_problem_desc = State()
    waiting_for_idea = State()
    waiting_for_rating = State()
    waiting_for_manager_problem = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

def main_menu():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN", callback_data="how_connect"),
        InlineKeyboardButton("–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç VPN", callback_data="vpn_not_work"),
        InlineKeyboardButton("–°–±–æ—Ä ip, –ª–æ–≥–æ–≤", callback_data="logs"),
        InlineKeyboardButton("–ö–æ–≥–¥–∞ –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="paid_subscription"),
        InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏", callback_data="ideas"),
        InlineKeyboardButton("–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –†–§ —Å–µ—Ä–≤–µ—Ä", callback_data="rf_server"),
    )
    return kb

def device_menu():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("Android", callback_data="device_Android"),
        InlineKeyboardButton("MacOS", callback_data="device_MacOS"),
        InlineKeyboardButton("Windows", callback_data="device_Windows"),
        InlineKeyboardButton("IOS", callback_data="device_IOS"),
    )
    return kb

def server_menu():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("–†–æ—Å—Å–∏—è üá∑üá∫", callback_data="server_Russia"),
        InlineKeyboardButton("–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã üá≥üá±", callback_data="server_Netherlands"),
    )
    return kb

def countries_menu():
    countries_list = ["–£–∫—Ä–∞–∏–Ω–∞", "–†–æ—Å—Å–∏—è", "–°–®–ê", "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "–ë–µ–ª–∞—Ä—É—Å—å", "–ù–µ—Ç –º–æ–µ–π —Å—Ç—Ä–∞–Ω—ã"]
    kb = InlineKeyboardMarkup(row_width=2)
    for country in countries_list:
        kb.insert(InlineKeyboardButton(country, callback_data=f"country_{country}"))
    return kb

def resolve_menu():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("–†–µ—à–µ–Ω–æ", callback_data="resolved"),
        InlineKeyboardButton("–ù–µ —Ä–µ—à–µ–Ω–æ", callback_data="not_resolved"),
    )
    return kb

def rating_keyboard():
    kb = InlineKeyboardMarkup(row_width=5)
    for i in range(1,6):
        kb.insert(InlineKeyboardButton(str(i), callback_data=f"rating_{i}"))
    return kb

# --- –£—Ç–∏–ª–∏—Ç—ã ---
def generate_ticket_code(length=6):
    chars = string.ascii_uppercase + string.digits
    while True:
        code = ''.join(random.choice(chars) for _ in range(length))
        cursor.execute("SELECT code FROM tickets WHERE code = ?", (code,))
        if cursor.fetchone() is None:
            return code

async def send_farewell(user_id: int):
    phrase = random.choice(FAREWELL_PHRASES)
    await bot.send_message(user_id, phrase, reply_markup=main_menu())

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        "üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É LKN VPN!\n\n"
        "–Ø —Ä–µ—à–∞—é —Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∑–∞ 60 —Å–µ–∫—É–Ω–¥:\n"
        "‚Ä¢ –û—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
        "‚Ä¢ –ù–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö\n"
        "‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n\n"
        "üìå –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—É–Ω–∫—Ç –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É.\n\n"
        "‚ö†Ô∏è –°–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–µ—Ä–µ–¥–∞—é –º–µ–Ω–µ–¥–∂–µ—Ä—É\n"
        "‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏: 2 –º–∏–Ω—É—Ç—ã\n"
        "üõ° –í–∞—à –±—ã—Å—Ç—Ä—ã–π –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π VPN - LKN!",
        reply_markup=main_menu()
    )

@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –ü–æ–º–æ—â—å\n"
        "/changepic - (–û—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ) —Å–º–µ–Ω–∞ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É."
    )

@dp.message_handler(commands=['changepic'])
async def cmd_changepic(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –≥—Ä—É–ø–ø—ã –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü (–Ω—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –ø–æ –≤–∞—à–µ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é)
    # –í –õ–° —É –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –º–µ–Ω—è—Ç—å —Ñ–æ—Ç–æ, —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö, –≥–¥–µ –±–æ—Ç –∞–¥–º–∏–Ω
    if not message.reply_to_message or not message.reply_to_message.photo:
        await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª—å –±–æ—Ç–∞.")
        return
    photo = message.reply_to_message.photo[-1]
    try:
        file = await bot.get_file(photo.file_id)
        downloaded = await bot.download_file(file.file_path)
        await bot.set_chat_photo(chat_id=message.chat.id, photo=downloaded)
        await message.answer("–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Ñ–æ—Ç–æ: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {e}")

@dp.message_handler()
async def fallback_handler(message: types.Message):
    # –ù–∞ —Å–ª—É—á–∞–π –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ callback
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É.", reply_markup=main_menu())

# --- Callback query handlers ---

@dp.callback_query_handler(lambda c: c.data == "how_connect")
async def process_how_connect(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await Form.waiting_for_device.set()
    await callback.message.answer("–ö–∞–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ?", reply_markup=device_menu())

@dp.callback_query_handler(lambda c: c.data == "vpn_not_work")
async def process_vpn_not_work(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await Form.waiting_for_server.set()
    await callback.message.answer("–ö–∞–∫–æ–π —Å–µ—Ä–≤–µ—Ä –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ?", reply_markup=server_menu())

@dp.callback_query_handler(lambda c: c.data == "logs")
async def process_logs(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("–í–ü–ù –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –∫—Ä–æ–º–µ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ.", reply_markup=main_menu())

@dp.callback_query_handler(lambda c: c.data == "paid_subscription")
async def process_paid_sub(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("–ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ –≤ –æ–∫—Ç—è–±—Ä–µ-–Ω–æ—è–±—Ä–µ 2025 –≥–æ–¥–∞.", reply_markup=main_menu())

@dp.callback_query_handler(lambda c: c.data == "ideas")
async def process_ideas(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await Form.waiting_for_idea.set()
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –∏–¥–µ–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")

@dp.callback_query_handler(lambda c: c.data == "rf_server")
async def process_rf_server(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        "–†–ö–ù –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ LKN VPN, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å YouTube –∏ –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.",
        reply_markup=main_menu()
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ---
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("device_"), state=Form.waiting_for_device)
async def process_device(callback: types.CallbackQuery, state: FSMContext):
    device = callback.data.split("_",1)[1]
    await callback.answer()
    text = ""
    if device in ["Android", "MacOS", "IOS"]:
        text = (
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é VPN:\n"
            "1) –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–ª—é—á –≤ –±–æ—Ç–µ.\n"
            "2) –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ.\n"
            "3) –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ v2RayTun.\n"
            "4) –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ '+' (–≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É).\n"
            "5) –í—ã–±–µ—Ä–∏—Ç–µ '–†—É—á–Ω–æ–π –≤–≤–æ–¥' –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á.\n"
            "6) –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –Ω–∞–∂–º–∏—Ç–µ '–í–∫–ª—é—á–∏—Ç—å'.\n"
            "–ì–æ—Ç–æ–≤–æ! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
        )
    elif device == "Windows":
        text = (
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é VPN –¥–ª—è Windows:\n"
            "1) –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–ª—é—á –≤ –±–æ—Ç–µ.\n"
            "2) –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á.\n"
            "3) –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ hiddify.\n"
            "4) –ó–∞–ø—É—Å—Ç–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '+' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–†—É—á–Ω–æ–π –≤–≤–æ–¥'.\n"
            "5) –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ '–í–∫–ª—é—á–∏—Ç—å'.\n"
            "–ì–æ—Ç–æ–≤–æ! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
        )
    else:
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await callback.message.answer(text, reply_markup=resolve_menu())
    await Form.waiting_for_resolve.set()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ ---
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("server_"), state=Form.waiting_for_server)
async def process_server(callback: types.CallbackQuery, state: FSMContext):
    server = callback.data.split("_",1)[1]
    await state.update_data(chosen_server=server)
    await callback.answer()
    await callback.message.answer("–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?", reply_markup=countries_menu())
    await Form.waiting_for_country.set()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã ---
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("country_"), state=Form.waiting_for_country)
async def process_country(callback: types.CallbackQuery, state: FSMContext):
    country = callback.data.split("_",1)[1]
    data = await state.get_data()
    server = data.get("chosen_server")
    await callback.answer()

    if server == "Russia" and country == "–£–∫—Ä–∞–∏–Ω–∞":
        await callback.message.answer(
            "–£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –±–ª–æ–∫–∏—Ä—É—é—Ç IP –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.\n"
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã üá≥üá±.",
            reply_markup=resolve_menu()
        )
    else:
        await callback.message.answer(
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
            "1) –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
            "2) –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
            "3) –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤–∏–∞—Ä–µ–∂–∏–º–∞ –Ω–∞ 5 —Å–µ–∫—É–Ω–¥\n"
            "4) –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n"
            "5) –í—ã–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ VPN\n\n"
            "–î–ª—è Windows: –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Ä—è–¥–æ–º —Å '+' –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ VPN –≤–º–µ—Å—Ç–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ.",
            reply_markup=resolve_menu()
        )
    await Form.waiting_for_resolve.set()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è ---
@dp.callback_query_handler(lambda c: c.data in ["resolved","not_resolved"], state=Form.waiting_for_resolve)
async def process_resolve(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data == "resolved":
        await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –æ—Ç 1 –¥–æ 5.", reply_markup=rating_keyboard())
        await Form.waiting_for_rating.set()
    else:
        await callback.message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–º–æ—á—å.")
        await Form.waiting_for_manager_problem.set()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ ---
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("rating_"), state=Form.waiting_for_rating)
async def process_rating(callback: types.CallbackQuery, state: FSMContext):
    rating = int(callback.data.split("_")[1])
    await callback.answer()
    if rating < 2:
        await callback.message.answer("–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ —É—Å—Ç—Ä–æ–∏–ª–æ.")
        await Form.waiting_for_problem_desc.set()
    else:
        await send_farewell(callback.from_user.id)
        await state.finish()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –ø–æ—Å–ª–µ –Ω–∏–∑–∫–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ ---
@dp.message_handler(state=Form.waiting_for_problem_desc)
async def process_problem_desc(message: types.Message, state: FSMContext):
    desc = message.text.strip().lower()
    cursor.execute("SELECT id, count FROM problem_feedback WHERE description = ?", (desc,))
    row = cursor.fetchone()
    if row:
        pid, cnt = row
        cursor.execute("UPDATE problem_feedback SET count = ? WHERE id = ?", (cnt+1, pid))
    else:
        cursor.execute("INSERT INTO problem_feedback(description, count) VALUES (?, 1)", (desc,))
    conn.commit()
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∏–º —Å–µ—Ä–≤–∏—Å.")
    await send_farewell(message.from_user.id)
    await state.finish()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ---
@dp.message_handler(state=Form.waiting_for_manager_problem)
async def process_manager_problem(message: types.Message, state: FSMContext):
    problem_text = message.text.strip()
    code = generate_ticket_code()
    cursor.execute(
        "INSERT INTO tickets (code, user_id, problem, status) VALUES (?, ?, ?, ?)",
        (code, message.from_user.id, problem_text, "new")
    )
    conn.commit()
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ, –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n"
        f"–ö–æ–¥ –æ–±—Ä–∞—â–µ–Ω–∏—è: {code}\n"
        "–í —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –æ—Ç 1 –¥–æ 5.",
        reply_markup=rating_keyboard()
    )
    await Form.waiting_for_rating.set()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–¥–µ–π ---
@dp.message_handler(state=Form.waiting_for_idea)
async def process_idea(message: types.Message, state: FSMContext):
    # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–¥–µ–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É/—Ñ–∞–π–ª –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∏–¥–µ—é! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –æ—Ç 1 –¥–æ 5.", reply_markup=rating_keyboard())
    await Form.waiting_for_rating.set()

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: /answer <–∫–æ–¥> <—Ç–µ–∫—Å—Ç> ---
@dp.message_handler(lambda message: message.text and message.text.startswith("/answer"))
async def process_manager_answer(message: types.Message):
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/answer <–∫–æ–¥> <—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞>")
        return
    code, answer_text = parts[1], parts[2]
    cursor.execute("SELECT user_id FROM tickets WHERE code = ?", (code,))
    row = cursor.fetchone()
    if not row:
        await message.answer("–ö–æ–¥ –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    user_id = row[0]
    try:
        await bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n{answer_text}")
        await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ '–†–µ—à–µ–Ω–æ' –∏–ª–∏ '–ù–µ —Ä–µ—à–µ–Ω–æ'.", reply_markup=resolve_menu())
        await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è...")
    executor.start_polling(dp)